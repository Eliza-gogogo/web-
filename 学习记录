## 学习记录

### HTML基础格式

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>111</title>
</head>
<body>

</body>
</html>
```

<hr>一般表示内容之间的分割线


### 属性

#### 字体font-family

"字体一"，“字体二”；

中文常用：微软雅黑（默认）、宋体（中文必须写在引号内）

英文常用：Arial\Helvetica

首选字体放在前面，备选字体放在后面

字体为宋体的时候，文字右边有1px的间距

#### 字体大小font-size

属性值为数值时，必须给属性值加上单位，属性值为0除外

单位还可以为px\pt\em,0.75pt=1px;

为了减少系统之间的字体显示差异，共同确定16px/ppi为标准字体大小默认值，即1em,默认情况下1em=16px;

谷歌最小显示字体为12px，小于12de ,按照12px显示

解决方法：截图，通过图片展示

#### 颜色color

属性值：关键词、GGB、十六进制颜色值

#### 字体加粗font-weight

normal bold bolder 100-900

bold bolder都表示加粗，但是一般浏览器不明显

css规范中将字体分为9个等级100-900；从最轻的字体变形到最重的

normal正常字体，相当于number为400，bolder加粗相当于number为700

100-500常规字体 600-900加粗字体

#### 字间距letter-spacing

具体数值，空格同样也是字符，也有字间距

#### 文本对齐text-align

-left

-right

-center

### 三种样式表

#### 行内样式

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>111</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div style="width:100px;height:100px;background:purple;"></div>

</body>
</html>
```

##### 优点

样式直接作用在当前标签上

##### 缺点

1.只能作用于当前标签上，不能重复使用

2.后续代码维护比较麻烦

3.代码可读性比较差（提倡html\css\js分离）

#### 内部样式

````html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>111</title>
    <style>
        div{
            width:100px;
            height:100px;
            background:purple;
        }
    </style>
</head>
<body>
    <div></div>
    <div></div>
</body>
</html>
````

##### 优点：

1.相同标签样式可以进行复用

2.代码的后期维护更方便

3.更符合规范，做到了html\css的分离，但是不够彻底

##### 缺点

只作用于当前页面

#### 外部样式

````html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>111</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div></div>

</body>
</html>
````

```html
div{
    width:100px;
    height:100px;
    background:purple;
}
```

在当前文件中，引入外面的.css后缀的样式表文件，作用域为有关联的所有文件

**rel="stylesheet"**样式表       **href="style.css"**位置

##### 优点

1.作用域有关联的所有文件（多页面复用）

2.多页面进行维护

3.Html\css分离的更彻底

##### 缺点

增加请求

​                                                                                                                                                                   ——2023.9.28

### 标签

#### 行内标签

    <span></span>
    <strong></strong>
    <b></b>加粗标签
    <em></em>倾斜标签
    <i></i>我是i倾斜标签
    <a herf="#"></a>

一行可以显示多个 ，不支持宽高设置，宽高由内容撑开

代码换行会解析空格 

上下padding margin border受到影响

#### 行内块标签

一行可以显示多个，可以进行宽高设置，代码换行会解析空格

对齐方式为顶部vertical-align:top;

#### 标签转换

把一个横线具有宽和高的性质i要将其转换成块元素

```html
display:block;
```

block块标签

inline行内标签

inline-block行内块标签

list-item把元素转换为列表  li的默认类型

none元素会隐藏起来，用来左下拉标签

**改变的是元素显示方式，而不是元素本性** 

### div标签

用来划分页面结构

```html
<div>
        第一个idv标签
    </div>
```

#### 特性

1.双标签

2.没有高度，但是可以被内容撑开，也可以用css设置

3.不设置宽度的情况下，默认撑满父级

### 标题标签

```html
    <h1>
        第一个标签
    <h1>
    <h2>
        第一个标签
    <h2>
```

有h1-h6

### 标签选择器

给当前网页中所有该标签增加相同的样式

#### 样式：标签名{这里放css样式}

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>111</title>
    <style>
        div{
            width:100px;
            height:100px;
            background:purple;
        }.two{
            width:200px;
            height:200px;
            background:pink;
        }.three{
            border:1px solid red;
        }
    </style>
</head>
<body>
     <div></div>
     <div class="two"></div>
     <div class="two three"></div>
</body>
</html>
```

#### 特性：

1.class命名可以在当前页面出现多次

2.开头不可以使用数字

3.不允许出现特殊字符，-和下划线除外

4.不适用中文

5.一个元素可以添加多个class，以空格间隔

### 标签类列表

#### 无序列表

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>111</title>
    <style>
        li{
            list-style:none;
        }
    </style>
    去掉前面的编号以及小点

</head>
<body>
    <ul>
        <li>我是无序列表</li>
        <li>我是无序列表</li>
        <li>我是无序列表</li>
    </ul>
</body>
</html>
```

#### 有序列表

```html
<body>
    <ol>
        <li>我是有序列表</li>
        <li>我是有序列表</li>
        <li>我是有序列表</li>
    </ol>
</body>
```

#### 自定义列表

```html
<body>
    <dl>
        <dt>你喜欢吃什么水果</dt>
        <dd>苹果</dd>
        <dd>香蕉</dd>
        <dd>梨</dd>
    </dl>
</body>
```

一个dl(列表)里面只能有一个dt(列表标题),可以有多个dd(标题展开的描述)

​                                                                                                                                                                                                  ——2023.9.29

### 图片

```html
<body>
    <img src="屏幕截图 2023-10-08 223035.png" alt="无法显示" title="这是美女"/>
</body>
```

src图片地址 title鼠标停留的提示信息  alt图片不显示的备用文字

#### 特性

1.一行显示多个，父级宽度不够元素换行

2.支持宽高

3.宽高等比缩放（同时设定不会等比缩放）

4.Img标签底存在空隙（vertical-align:top解决这个问题）

5.换行会被解析出来一个空格

#### 换行间隙解决方案

1.父级font-size设置为0

2.利用margin-left：负值

### 路径

#### 绝对路径

1.写本地绝对路径的时候，把反斜杠\变为正斜杠/

2.可以直接把图片放入浏览器里面，直接复制地址栏的地址

#### 相对路径

1.当前文件于目标文件在同一个目录下，写法：目标文件+后缀

2.当前文件和目标文件的文件夹在一个目录下，写法：文件夹名称/目标文件

3.目标文件和当前文件的文件夹在一个目录下，写法：../目标文件

### 超链接

```html
<body>
    <a href="#">没有跳转页面</a>
    <a href="https://www.bilibili.com/">跳转B站</a>
</body>
```

必须由herf属性，否则知识一个展位标签

#### 特性

1.一行可以显示多个，父级宽度不够会换行显示

2.不支持显示宽高

3.换行会产生空格

4.父级字体颜色的设置对其无效**修改标签的时候一定要修改自己的颜色，而不是父级**

5.有下划线

#### 跳转页面

target

_blank新窗口打开

_self在当前窗口打开

`````html
<body>
    <a href="#">没有跳转页面</a>
    <a href="https://www.bilibili.com/" target="_blank">跳转B站</a>
</body>
`````

​                                                                                                                                                                                                ——2023.10.6

### 图片超链接伪类

##### 特征

link没有被访问过的

visited被访问过的

hove鼠标经过这个链接

active在这个链接放下去

注意顺序

### 浮动

#### 语法

float:left\right\nino\inherit(继承)

**overflow:hidden**消除浮动的方法

#### 特性

1.可以左右移动，直到它的边缘碰到边框为止

2.一行可以显示多个元素

3.支持宽高

4.宽高由内容撑开

5.破坏文档流

```html
<style>
       .box{
        width:700px;
        /* height:700px; */
        border:2px solid #000;
        overflow:hidden;
       }
       .box div{
        width:200px;
        height:200px;
        float:left;
       }
       .box .item1{
        background:red;

       }
       .box .item2{
        background:green;
       }
       .box .item3{
        background:pink;
       }
    </style>
```

### 边界margin

```html
       .item1{
        background:red;
        margin-bottom:50px;
        margin-top:50px;
        margin-left:50px;
        margin-right:50px;
        margin:50px 50px 50px 50px;
       }
```

**盒子和盒子之间的距离** 

4个值表示分别顺时针，上右下左

3个值表示上左右 下

2个值表示上下 左右

1个值表示4个方向

可以接受正负值，负值只有左上两个方向方向有效

水平居中：margin:0 auto;

### 边框padding

```html

```

基础表示和边界一样

**元素内容到元素边框之间的距离**

#### 注意：

padding 属性要添加到父元素身上

值是额外加载元素之上的，会影响元素的大小

背景图片默认在盒子左上角，不影响背景图的默认位置

### 行高

单行文本行高等于容器高度，文本在容器重垂直方向居中对齐

单行文本行高小于容器高度，文本在容器重垂直中以上对齐

单行文本行高大于容器高度，文本在容器重垂直中一下对齐

#### 测量

单行文本：行高是奇数，文字下方比上方多ipx

多行文本：从第一行文本最顶端到第二行文本最顶端即为行高

### overflow溢出

overflow:visible;默认

overflow:hidden;隐藏

overflow:auto;超出才显示滚动条

overflow:scroll;强制出现滚动条

### text-overflow文字溢出

text-overflow:clip;裁切

text-overflow:ellipsis;省略号

#### 省略号使用

可以结合text-overflow:ellipsis;省略号   和overflow:hidden  和   white-space:nowrap（强制不换行）两个属性

```html
.txt h3{
    font-size:14px;
    line-height: 25px;
    font-weight:normal;
    text-overflow:ellipsis;
    overflow:hidden;
    white-space:nowrap;
}
```

​                                                                                                                                                                                                        ——2023.10.7

### 边框

```html
<style>
        div{
        width:200px;
        height:200px;
        border-width:5px;
        border-style:solid;
        border-color:red;
       }

    </style>
```

#### 边框样式

solid直线

dotted点虚线

dashed方虚线

double双线 宽度相当于border-width的值

none无

#### 颜色形式

关键词

rgb

十六进制颜色

#### 复合样式

border:宽度 样式 颜色；属性值之间用空格

```html
border:5px solid red;
```

#### 多方向边框

border-top\bottom\left\right:

​      width   style    color

#### 去掉边框

```html
border:none;
border-left:none;
```

### 背景颜色

background-image:url（背景图片地址：相对路径）

当背景框范围大于图片，默认图片铺满背景框

#### 重复：

background-repeat:no-repeat;没重复

background-repeat：repeat;

background-repeat：repeat-x;横方向重复

background-repeat：repeat-y;纵方向重复

#### 定位

background-position:水平方向 垂直方向

关键字：

left right bottom top center

```html
background-position:right top;
background-position:center center;
background-position:10px 50px;
background-position:center;
background-position:10% 50%;
background-position:right20px top50px;
```

#### 背景滚动

background-attachment:fixed；背景图不随滚动条的滚动而滚动

background-attachment:scroll;背景图随滚动条的滚动而滚动

#### 复合样式

background:背景颜色 背景图 背景重复 背景定位 背景跟随滚动

### 定位

position:static默认，静态（没有定位i）\absolute\fixed

\relative相对定位

修改位置:

left:50px;等等

####  absolute绝对定位

元素脱离文档流

内联标签可以支持宽高

块元素不设置快高的情况下，由内容撑开

可以i利用bottom top设置偏移值

位移方向 参照父级定位

一般用相对定位作为绝对定位的定位父级，子绝父相

提升层级

```html
.box{
            width:600px;
            height:600px;
            border:2px solid green;
            position:relative;
        }
        .item{
            width:100px;
            height:100px;
            background:pink;
            position:absolute;
            left:50%;
            top:50%;
            margin-left:-50px;
            margin-top:-50px;
        }	01	
```

#### fixed固定定位

类似于background-attachment:fixed；固定在某一个位置

块元素不设置宽高的时候，宽高由内容撑开

使内联/行内元素支持宽高

元素定位参照 页面可视区

提升层级

脱离文档流

​                                                                                                                                                                                                        ——2023.10.8

### 层级

#### 同级元素 

定位会提高层级，除了static

后面的定位元素层级高于前面的层级

#### 嵌套层级

子级的层级高于父级的4层级

改变层级的属性：z-index:1;默认：0；

#### 特性

只能加给定位元素

数值越大层级越高，可以接受负数

建议同级元素之间比较层级

### 表单元素及属性

```html
<form action:"提交地址" methon="提交方式" target="_blank"></form>
```

#### action

表单信息提交地址，提交成功会跳转该地址

#### method

提交方式

-get 默认

-post

#### target

信息提交成功打开网页的方式

_blank

_self

#### input表单元素

<input type=""/>

单标签 收集用户信息

##### type类型

1.text的单行文本输入框

```html
<input type="text" value="单行文本内的默认文字"/>
<input type="text" placeholder="单行文本内的默认文字"/>
```

placehoider属性提供可描述输入字段预期值的提示信息，输入文字时里面默认文字会消失

2.submit提交

```html
<input type="submit" value="提交按钮上的文字设置"/>
```

3.password密码

```html
<input type="passwprd"/>
```

4.reset重置按钮

```html
<input type="reset" value="重置按钮"/>
```

5.button按钮

```html
<input type="button"/>
<button>按钮</button>
```

两种类型都可以

### 圆角border-radius

三种数值表示：px % em

```html
 border-radius:10px;圆角            
 border-radius:10px/30px;非圆角
 border-radius:10px 30px左上角右下角  和  右上角左下角
 border-radius:10px 30px 50px;左上角 右上角左下角 右下角
 border-radius:10px 30px 10px 30px左上角 右上角 右下角 左下角
```

斜杠左边全部设置x半径 斜杠右边全部设置y半径

左上角：border -top-left-radius其他同理

先上下 后左右  不要倒过来写

不想要圆角直接设置为0

### 边框三角形

```htm
            border-top-color:red;
            border-left-color:green;
            border-right-color:blue;
            border-bottom-color:black;
            border-color:aliceblue transparent transparent blue;
```

三角形一般通过边框来书写，其他三个变设置为透明即可

### 伪元素

该元素在页面真实存在，但是在html中不存在

```html
 <style>
        div{
            color:red;
        }
        div::before{
            content:"开";
            color:green;
        }
        div::after{
            content:"吧";
            color:blue;
        }
        
    </style>
</head>
<body>
    <div>课</div>
</body>
```

content的内容：可以是文字，调用当前元素的属性，url()引用媒体，添加图标

#### 引用当前元素属性

```html
<style>
        a::after{
            content:attr(herf);
        }
    </style>
</head>
<body>
    <a herf="网址"></a>
</body>
```

#### 引用url()

```html
<style>
        div::after{
            content:url(sc.jpg)
        }
    </style>
</head>
<body>
    <div>
        这是一张照片
    </div>
```

#### 添加图标

```html
    <link rel="stylesheet" href="font-awesome.css">
    <style>
        span::after{
            content:'\f2d5';
            font:14px/1 FontAwesome;
            display:inline-block;
        }
    </style>
</head>
<body>
    <span></span>
</body>
```

http://fontawesome.dashgame.com/图标库

利用content及时插进去图标即可

​                                                                                                                                                                                                        ——2023.10.9

### 弹性容器

display:flex

- `justify-content` 属性控制弹性容器中弹性项目在主轴（水平方向）上的对齐方式。可以通过设置以下值来实现不同的对齐方式：
  - `flex-start`：弹性项目位于主轴起点。
  - `flex-end`：弹性项目位于主轴终点。
  - `center`：弹性项目居中对齐。
  - `space-between`：弹性项目平均分布在主轴上，两端不留空白。
  - `space-around`：弹性项目平均分布在主轴上，每个项目周围留有相等的空白。
- `align-items` 属性控制弹性容器中弹性项目在侧轴（垂直方向）上的对齐方式。可以通过设置以下值来实现不同的对齐方式：
  - `flex-start`：弹性项目位于侧轴起点。
  - `flex-end`：弹性项目位于侧轴终点。
  - `center`：弹性项目居中对齐。
  - `baseline`：弹性项目沿着它们的基线对齐。
  - `stretch`：弹性项目将沿着侧轴拉伸以填充剩余空间。

### 单选按钮

```html
<p>性别: 
	<input id="man" type="radio" checked="checked" name="sex"/>男
	<input type="radio" id="woman" name="sex">女
</p>

```

​                                                                                                                                                                                                        ——2023.10.10

## 做题记录

### 第一题

#### 标签区别

span标签是一个行内元素，用于外观控制和实现特殊效果

p标签表示段落的块级元素，会自动换行，将文本组织成段落，并企鹅在段落之间自动添加换行

h标签表示标题的块级元素，有一定层次感

#### 转义字符

 &gt 是 ">" 的转义字符，用于表示大于号">"。

&lt 是 "<" 的转义字符，用于表示小于号"<"。因为在HTML中，"<"具有特殊的含义，用于标签的起始

```html
<a href="blog_detail.html">查看全文 &gt;&gt; </a>
```

显示的是

查看全文>>

#### 各种设置

1.url(../img/fl111.jpg) 背景图片的路径

2.background-color: rgba(50, 50, 50, 0.4);背景半透明效果

3.justify-content: flex-start;  靠左布局，子元素使用这个来控制元素在水平方向如何排列 

4.align-items: center; 居中布局，子元素使用这个来控制元素在垂直方向如何排列 

5.box-sizing:border-box;表示元素的总宽度等于内容宽度+内边距+边框，调整元素的时候，总体尺寸不会发生变化

6.text-decoration: none;  去掉下划线    

7.height: calc(100% - 50px);设置高度，整体高度减去导航栏高度，css3引入calc库计算页面高度，-两侧必须要有空格 

calc()函数，将父元素高度减去50像素，使用时要保证操作符两边有空格

8.justify-content: space-between;  让布局中间留有空白

9.overflow: auto;    如果内容超出范围了, 自动添加滚动条

10.justify-content: space-around;空格环绕

11.border-radius: 20px;是CSS中用于设置元素圆角的属性。

12.text-indent:2em;文本缩进2字符

13.text-align:center水平居中  

text-align用于控制文本的水平对齐方式，而align-content用于控制子元素在容器中的垂直对齐方式。

14.line-height:center;文字垂直居中

15.给父标签添加弹性布局，他的子元素就会按照弹性布局

#### 超链接

使用超链接 先将其转化成块级元素，容易设置尺寸

display:block;

.container {
  display: flex;
  justify-content: center; /* 水平居中 */
  align-items: center; /* 垂直居中 */
  height: 100vh; /* 设置容器高度，根据需要调整 */
}

​                                                                                                                                                                                                         ——2023.10.11

#### 搜索框

```html
<input type="text" id="keyword" placeholder="请输入关键词">
            <button onclick="search()">搜索</button>
```

type="text" 表示输入框类型为文本。id="keyword"用于标识该输入框，可以在后续的 JavaScript 代码中使用该 ID 来获取输入框的值或对其进行其他操作,placeholder="请输入关键词"` 是一个占位符.

```html
var keyword = document.getElementById('keyword').value.trim();
      var results = document.getElementById('results');

      // 清空之前的搜索结果
      results.innerHTML = '';
```

var keyword = document.getElementById('keyword').value.trim();：使用 document.getElementById('keyword') 获取到具有指定 ID 的元素，通过 .value 可以获取到输入框的值，.trim() 是为了去除输入框值的首尾空格，并将结果存储在 keyword` 变量中。

var results = document.getElementById('results');获取具有指定 ID 的元素.

results.innerHTML = '';搜索结果区域的 HTML 内容清空，相当于重置搜索结果.

#### 正则表达式

var regex = new RegExp(keyword, 'ig'); 这行代码创建了一个正则表达式对象，用于在文章标题和内容中匹配关键词。其中 keyword 是从输入框中获取到的关键字，'i' 表示忽略大小写，'g' 表示全局匹配。

RegExp 是 JavaScript 中用于处理正则表达式的构造函数。通过 RegExp` 构造函数可以创建一个正则表达式对象，用于在文本中进行模式匹配和字符串替换等操作。

构造函数的语法为：

```
Copy Codenew RegExp(pattern, flags)
```

highlightKeywords函数： 这个函数用于为文章标题和内容中匹配到的关键词添加高亮效果。它会遍历传入的节点 element 的所有子节点，并递归处理子节点。对于文本节点，使用正则表达式匹配关键词，再为匹配到的关键词添加高亮样式；对于其他类型的节点，如元素节点，则递归处理它们的子节点。

#### 高亮处理 

document.createDocumentFragment()` 是创建一个空白的文档片段对象，用于存储一系列 DOM 元素或其他文档片段。

​                                                                                                                                                                                                      ——2023.10.12

#### DOM树的相关操作

DOM 树中每个节点都有 `nodeType` 属性，用于表示节点的类型，其取值如下：

- 1：元素节点（例如 `<div>`、`<p>` 等）
- 2：文本节点（包含在元素节点或属性节点中的文本内容）
- 3：注释节点
- 4：文档节点

在这段代码中，使用 `node.nodeType` 判断当前节点是元素节点还是文本节点。如果当前节点是文本节点，则执行以下操作：

1. 使用正则表达式 `regex` 匹配当前文本节点中是否存在搜索关键字，并得到所有匹配结果的位置信息。
2. 如果匹配到了关键字，则创建一个空白的文档片段 `fragment`，然后遍历匹配结果，对每一个匹配结果创建 `<span>` 元素并添加到 `fragment` 中。
3. 最后将原始的文本节点替换成 `fragment`，从而实现关键字高亮。

如果当前节点是元素节点，则递归处理它的子元素，直到处理完所有子元素。

#### 照片墙

```html
transition:all 0.4s;   /* 过渡动画 */
  flex-grow: 1;  /*让 li 自动塞满 ul 。*/
```

transition: all 0.4s; 是 CSS 中的过渡动画效果的声明，用于指定元素在改变属性值时应用的动画效果。

flex-grow: 1;，是 Flexbox 布局中的一个属性，用于指定弹性容器中的子元素在剩余空间分配上的扩展比例。

#### js交互

这段代码是一个 JavaScript 脚本，用于实现鼠标进入列表项时的交互效果。

```
javascriptCopy Codelies[0].classList.add("active");
```

- 这行代码会给列表中的第一个 <li> 标签添加名为 "active" 的 CSS 类。该标签添加 "active" 类，可以改变其样式以表示当前激活状态。

```
javascriptCopy Codelet findSiblings = function(tag) {
  let parent = tag.parentNode;
  let child = parent.children;
  let sb = [];
  for (let i = 0; i <= child.length - 1; i++) {
    if (tag !== child[i]) {
      sb.push(child[i]);
    }
  }
  return sb;
};
```

- 这段代码定义了一个名为 `findSiblings` 的函数，用于查找给定标签的兄弟标签（即父元素的其他子元素）。
- 函数首先获取给定标签的父元素（即包含它们的元素），然后通过遍历父元素的所有子元素，并将不是给定标签的子元素添加到一个列表中。
- 最后，该函数返回包含兄弟标签的列表。

```
javascriptCopy Codefor (let i = 0; i <= lies.length - 1; i++) {
  lies[i].addEventListener("mouseenter", function() {
    let siblings = findSiblings(this);
    this.classList.add("active");
    for (let k = 0; k <= siblings.length - 1; k++) {
      siblings[k].classList.remove("active");
    }
  });
}
```

- 这个循环用于为每个 `<li>` 标签添加鼠标进入事件监听器。

- 当鼠标进入一个标签时，事件监听器会执行以下操作：

  - 使用 `findSiblings` 函数获取该标签的兄弟标签。
  - 给当前标签添加 "active" 类，以突出显示它是当前激活的项。
  - 遍历兄弟标签，并从它们中移除 "active" 类，以恢复它们的默认样式。

通过上述代码，当鼠标进入列表项时，当前项会突出显示，而其他项则会恢复默认样式，以实现交互效果。

​                                                                                                                                                                                                         ——2023.10.13

## 第二题

### 网页描述信息

1.

```html
<meta name="description" content="bilibili是国内知名.../>
```

meta 标签的目的是提供给搜索引擎和浏览器一些关于网页内容的概述，便于用户在搜索结果页面或者浏览器标签页中快速了解网页的主题和内容。同时也有助于提高网页在搜索引擎结果中的显示效果。

```html
transition: width 0.3s;
```

当元素的宽度发生变化时，浏览器将以平滑的方式过渡到新的宽度状态，而不是立即切换。这种行为可用于使导航菜单、下拉列表等动态交互更加流畅。

```html
<form id="nav-searchform">
```

用于创建一组包含输入控件（如输入框、下拉列表、单选按钮等）和提交按钮的 HTML 表单。

```html
flex-shrink: 0;
```

每个 flex 项的 flex-shrink 属性值为 1，表示它们都可以缩小以适应伸缩容器。如果某个 flex 项的 flex-shrink 属性值为 0，则表示该项不会在缩小时失去它的宽度。

```html

```

### 导航栏固定

尝试过当下滑的时候，当下滑的时候，导航栏变换样式，但是失败了

现在也不知道为啥，很懵

### 背景图

找不到合适的背景图和图标，就使用csdn上一个博主提供的图片资源和图标资源

### 下拉框

1.

```html
.nav-dropdown {
  display: none;
}

.nav-item:hover .nav-dropdown {
  display: block;
}
```

.nav-dropdown 是包含更多内容的下拉菜单元素。初始状态下，它被设置为隐藏。然后，使用 .nav-item:hover .nav-dropdown将其与包含导航栏项的父元素相关联，在鼠标悬停在导航栏项上时，下拉菜单将显示出来。

2.

```html
transform: translateX(-50%) translateY(20px);
```

表示在水平方向上将元素向左平移 -50% 的宽度。这样设置可以将元素水平居中，因为 -50% 的值相当于元素宽度的一半。

translateY(20px) 表示在垂直方向上将元素向下平移 20px的距离。这样设置可以实现向下偏移。

#### 3.相对位置

```html
.nav-link-dropdown-parent {
    position: relative;
}
.nav-link-dropdown-parent:hover .nav-dropdown {
    display: block;
    position: absolute;
    left: 0;
    top: 100%;
}
```

4.

```htm
cursor: pointer;
```

可以使鼠标指针在悬停在元素上时显示为手型，表示该元素是可点击的

### 轮播图

1.

基本思路：多张照片按照一定时间和顺序从窗口展示

```html
animation: run 10s ease infinite;
```

animation`：指定要应用的动画效果。

run：动画的名称。在样式表中，你需要定义该名称对应的具体动画效果。

10s：动画的持续时间。这表示动画将在10秒内完成。

ease：指定动画的计时函数，它决定了动画过程的速度变化。`

ease是一种平滑缓慢加速、然后再缓慢减速的计时函数。i

nfinite：指定动画应该无限循环播放。

2.最后一张照片只有半边能显示，最后发现是容器的宽度优点问题，导致最后一张照片只有一般显示

3.想给轮播图设置自动轮播和手动轮播，但是仍旧存在好多的问题，只显示第一张皂片，后面几张照片显示是空白，js的部分设计不起作用。解决不出来，于是放弃了手动轮播图。

### 视频

```html
    @keyframes uphill {
    from {
    top: 133px;
    }
    to {
    top: 17px;
    }
    }
    .articlemiddle-00-right li:hover p {
    animation: uphill 1s;
    top: 17px;
    }
```

定义了一个名为 "uphill" 的关键帧动画。 在该动画中，通过使用 "from" 指定在动画开始时元素应该处于何种状态（top:133px），然后使用 "to" 指定动画结束时元素应该处于何种状态（top:17px）。 

接下来，当鼠标悬停在 .articlemiddle-00-right li 元素上时，会触发动画效果并在1秒钟内通过 animation 属性将 uphill 动画与该元素相关联。 此外，当前元素的 top 属性也被设置为 17px，以确保元素在动画结束时停留在正确的位置。

加上底部的那个信息之后，视频的交互性低了很多，非常不灵敏



